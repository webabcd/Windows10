<Page
    x:Class="Windows10.Controls.LayoutControl.GridDemo"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Windows10.Controls.LayoutControl"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid Background="Transparent">
        
        <!--
            Grid - 网格布局控件
                Grid.RowDefinitions - 用于定义 Grid 中的行
                Grid.ColumnDefinitions - 用于定义 Grid 中的列
                BorderBrush - 边框画笔
                BorderThickness - 边框宽度（左 上 右 下）
                CornerRadius - 边框的角半径（左上 右上 右下 左下）
                Padding - 内容与边框的间距（左 上 右 下）
        
            RowDefinition - 行定义
                Height - 高度
                MinHeight - 最小高度
                MaxHeight - 最大高度
                ActualHeight - 获取真实高度
        
            ColumnDefinition - 列定义
                Width - 宽度
                MinWidth - 最小宽度
                MaxWidth - 最大宽度
                ActualWidth - 获取真实宽度
                
            Grid.Row - 控件所在的 Grid 的行的索引
                code-behind: int GetRow(FrameworkElement element), SetRow(FrameworkElement element, int value)
            Grid.Column - 控件所在的 Grid 的列的索引
                code-behind: int GetColumn(FrameworkElement element), SetColumn(FrameworkElement element, int value)
            Grid.RowSpan - 合并的行数。 控件所在行，以及控件所在行之后的需要连续合并的行的总行数
                code-behind: int GetRowSpan(FrameworkElement element), SetRowSpan(FrameworkElement element, int value)
            Grid.ColumnSpan - 合并的列数。 控件所在列，以及控件所在列之后的需要连续合并的列的总列数
                code-behind: int GetColumnSpan(FrameworkElement element), SetColumnSpan(FrameworkElement element, int value)
                        
            Width 和 Height 的可用值如下：
            1、Auto - 自动设置为一个合适的值。默认值
            2、Pixel - 像素值
            3、* - 比例值。如 * 就代表全部，2* 和 7* 就代表后者是前者的 7/2 倍
        
            注：Grid 的 HorizontalAlignment 属性和 VerticalAlignment 属性的默认值均是 Stretch
        -->
        
        <Grid Background="Blue" Width="300" Height="300" BorderBrush="Orange" BorderThickness="10" CornerRadius="10" Canvas.ZIndex="10">
            <Grid.RowDefinitions>
                <RowDefinition Height="50" />
                <RowDefinition Height="3*" />
                <RowDefinition Height="7*" />
                <RowDefinition Height="*" MinHeight="50" MaxHeight="100" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <TextBox Grid.Row="0" Grid.Column="0" Background="red" Text="webabcd" />
            <TextBox Grid.Row="0" Grid.Column="1" Background="red" Text="webabcd" Grid.ColumnSpan="2" HorizontalAlignment="Center" />
            <TextBox Grid.Row="1" Grid.Column="0" Background="red" Text="webabcd" />
            <TextBox Grid.Row="1" Grid.Column="1" Background="red" Text="webabcd" Grid.ColumnSpan="2" HorizontalAlignment="Center" />
            <TextBox Grid.Row="2" Grid.Column="0" Background="red" Text="webabcd" />
            <TextBox Grid.Row="2" Grid.Column="1" Background="red" Text="webabcd" Grid.RowSpan="2" VerticalAlignment="Bottom" />
            <TextBox Grid.Row="2" Grid.Column="2" Background="red" Text="webabcd" />
            <TextBox Grid.Row="3" Grid.Column="2" Background="red" Text="webabcd" />
            <TextBox Grid.Row="4" Grid.Column="2" Background="red" Text="webabcd" />
        </Grid>

        <!--    
            Canvas.ZIndex - 用于设置控件的 z-index 值（不要求必须在 Canvas 内）
        
            注：在 Grid 内的子元素的定位可以通过 Margin 来实现
        -->
        <Rectangle Margin="10 50 100 150" Fill="Green" Canvas.ZIndex="1" />

    </Grid>
</Page>
