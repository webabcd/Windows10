<Page
    x:Class="Windows10.Controls.NavigationControl.CommandBarDemo"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Windows10.Controls.NavigationControl"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid Background="Transparent">
        <StackPanel Margin="10 0 10 10">

            <CheckBox Name="chkIsSticky" Margin="5" Content="IsSticky" IsChecked="False" Checked="chkIsSticky_Checked" Unchecked="chkIsSticky_Unchecked" />
            <StackPanel Margin="5" Orientation="Horizontal">
                <RadioButton Name="radioButtonMinimal" GroupName="myGroup" Content="AppBarClosedDisplayMode.Minimal" Checked="radioButtonMinimal_Checked" />
                <RadioButton Name="radioButtonHidden" GroupName="myGroup" Margin="10 0 0 0" Content="AppBarClosedDisplayMode.Hidden" Checked="radioButtonHidden_Checked" />
                <RadioButton Name="radioButtonCompact" GroupName="myGroup" Margin="10 0 0 0" IsChecked="True" Content="AppBarClosedDisplayMode.Compact" Checked="radioButtonCompact_Checked" />
            </StackPanel>

            <Button Name="btnOpen" Margin="5" Content="打开 CommandBar" Click="btnOpen_Click" />
            <Button Name="btnClose" Margin="5" Content="关闭 CommandBar" Click="btnClose_Click" />

        </StackPanel>
    </Grid>

    <!--
        Page.BottomAppBar - 下方应用程序栏控件
        Page.TopAppBar - 上方应用程序栏控件
    
        CommandBar - 应用程序栏控件。相对于 AppBar 来说， CommandBar 易用性强，扩展性弱（在 CommandBar 内只能包含 AppBarButton, AppBarToggleButton, AppBarSeparator）。CommandBar 继承自 AppBar
            IsOpen - 是否打开 CommandBar
            IsSticky - 是否是粘性的 CommandBar（即在点击非 CommandBar 区域时，是否不会关闭 CommandBar），默认值 false
            ClosedDisplayMode - 应用程序栏关闭状态下的显示模式
                Minimal - 最小化模式，只显示省略号
                Hidden - 隐藏
                Compact - 显示 PrimaryCommands 中的按钮的 icon，但不显示其 label，且 SecondaryCommands 中的按钮不会显示，此值为默认值（AppBar 的 ClosedDisplayMode 的默认值为 Minimal）
            Opening, Opened, Closing, Closed - 几个事件，不解释
    
        注：无法手动设置 CommandBar 中的 AppBarButton, AppBarToggleButton, AppBarSeparator 的 IsCompact 属性，其如何设置由系统自己决定（比如 Compact 模式的关闭状态的 CommandBar 会隐藏 label，打开状态的 CommandBar 会显示 label）
    -->
    <Page.BottomAppBar>
        <CommandBar x:Name="commandBar">

            <!--
                关于 AppBarButton 请参见 /Controls/ButtonControl/AppBarButtonDemo.xaml
                关于 AppBarToggleButton 请参见 /Controls/ButtonControl/AppBarToggleButtonDemo.xaml
            -->
            
            <AppBarToggleButton Icon="Shuffle" Label="Shuffle" />
            <AppBarToggleButton Icon="RepeatAll" Label="Repeat" />
            <AppBarSeparator/>
            <AppBarButton Icon="Back" Label="Back" />
            <AppBarButton Icon="Stop" Label="Stop" />
            <AppBarButton Icon="Play" Label="Play" />
            <AppBarButton Icon="Forward" Label="Forward" />
            <AppBarSeparator/>
            <!--
                AppBarButton 是支持 Flyout 的
            -->
            <AppBarButton Icon="Add" Label="Add">
                <AppBarButton.Flyout>
                    <MenuFlyout>
                        <MenuFlyoutItem Text="MenuFlyout Item 1"/>
                        <MenuFlyoutItem Text="MenuFlyout Item 2"/>
                        <MenuFlyoutItem Text="MenuFlyout Item 3"/>
                    </MenuFlyout>
                </AppBarButton.Flyout>
            </AppBarButton>

            <!--
                CommandBar.PrimaryCommands - 其内的按钮会显示在 CommandBar 内部的右侧（[ContentProperty(Name = "PrimaryCommands")]）
                CommandBar.SecondaryCommands - 其内的按钮会显示在 CommandBar 的上部（只显示 label，不显示 icon）
            -->
            <CommandBar.SecondaryCommands>
                <AppBarButton Icon="Like" Label="Like" />
                <AppBarButton Icon="Dislike" Label="Dislike" />
            </CommandBar.SecondaryCommands>

            <!--
                设置 CommandBar 或 AppBar 的 Style 自然是通过 AppBar.Style
                那么如何设置 CommandBar.SecondaryCommands 的样式呢？可以通过 CommandBar.CommandBarOverflowPresenterStyle
            -->
            <CommandBar.CommandBarOverflowPresenterStyle>
                <Style TargetType="CommandBarOverflowPresenter">
                    <Setter Property="Background" Value="Black" />
                </Style>
            </CommandBar.CommandBarOverflowPresenterStyle>
        </CommandBar>
    </Page.BottomAppBar>
</Page>
