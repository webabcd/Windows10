<Page
    x:Class="Windows10.Resource.StaticResourceDemo"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Windows10.Resource"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    
    xmlns:common="using:Windows10.Common">

    <!--
        定义各种类型的 StaticResource（Resources 属性来自 FrameworkElement）
        系统会在加载 xaml 的时候去查找并应用 StaticResource 指定的资源
        StaticResource 需要先定义后引用，比如如果把下面这段 Page.Resources 代码放到 Grid 后面去定义，那么就会报错
    -->
    <Page.Resources>
        <x:String x:Key="MyString">StaticResource 经常用于指定 Style 或 ControlTemplate 资源，参见 /Controls/UI 部分</x:String>
        <x:Double x:Key="MyDouble1">24</x:Double>
        <x:Double x:Key="MyDouble2">48</x:Double>
        <Thickness x:Key="MyThickness">20,20,20,20</Thickness>
        <common:Employee x:Key="CurrentEmployee" Name="wanglei" Age="35" IsMale="True"></common:Employee>
        
        <!--静态资源也可以用来定义控件-->
        <Flyout x:Key="MyFlyout">
            <StackPanel>
                <TextBlock Text="我是 Flyout 中的内容" />
            </StackPanel>
        </Flyout>
    </Page.Resources>
    
    <Grid Background="Transparent">
        <StackPanel Margin="10 0 10 10">

            <!--
                下面演示 StaticResource 的使用方法
            -->

            <!--
                StaticResource 的 3 种引用方式
            -->
            <TextBlock Name="textBlock0" Margin="5" Text="{StaticResource MyString}" />
            <TextBlock Name="textBlock1" Margin="5" Text="{StaticResource ResourceKey=MyString}" />
            <TextBlock Name="textBlock2" Margin="5">
                <TextBlock.Text>
                    <StaticResource ResourceKey="MyString" />
                </TextBlock.Text>
            </TextBlock>


            <TextBlock Name="textBlock3" Margin="5" FontSize="{StaticResource MyDouble1}" Text="我是 TextBlock">
                <!--
                    Style 或 ControlTemplate 内都可以引用静态资源
                -->
                <TextBlock.Style>
                    <Style TargetType="TextBlock">
                        <Setter Property="Padding" Value="{StaticResource MyThickness}" />
                    </Style>
                </TextBlock.Style>
            </TextBlock>


            <!--
                动态改变引用的资源
            -->
            <Button Name="btnChangeStaticResource" Content="改变引用的 StaticResource" Margin="5" Click="btnChangeStaticResource_Click" />


            <!--
                设置 FrameworkElement 的 DataContext 为一个指定的静态资源
            -->
            <TextBlock Margin="5" DataContext="{StaticResource CurrentEmployee}" Text="{Binding Name}" />
            <TextBlock Margin="5" DataContext="{StaticResource CurrentEmployee}" Text="{Binding Age}" />
            <TextBlock Margin="5" DataContext="{StaticResource CurrentEmployee}" Text="{Binding IsMale}" />


            <!--
                引用指定的静态资源（此静态资源是一个控件）
            -->
            <Button Margin="5" Content="按我弹出 Flyout" Flyout="{StaticResource MyFlyout}" />


            <!--
                如果一个 FrameworkElement 要引用内部 Resources 的话，像下面这么写是会报错的，因为资源被先引用后定义了
            -->
            <!--
            <TextBlock Margin="5" Text="我是 TextBlock" Foreground="{StaticResource MyTextBlockForeground}">
                <TextBlock.Resources>
                    <SolidColorBrush x:Key="MyTextBlockForeground" Color="Red" />
                </TextBlock.Resources>
            </TextBlock>
            -->

            <!--
                如果一个 FrameworkElement 要引用内部 Resources 的话，需要像下面这么写（资源先定义后引用）
            -->
            <TextBlock Margin="5" Text="我是 TextBlock">
                <TextBlock.Resources>
                    <SolidColorBrush x:Key="MyTextBlockForeground" Color="Red" />
                </TextBlock.Resources>
                <TextBlock.Foreground>
                    <StaticResource ResourceKey="MyTextBlockForeground" />
                </TextBlock.Foreground>
            </TextBlock>

        </StackPanel>
    </Grid>
</Page>
