<Page
    x:Class="Windows10.Bind.Tips"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Windows10.Bind"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    
    xmlns:common="using:Windows10.Common"
    Background="Red">

    <Page.Resources>
        <common:NullableBooleanToBooleanConverter x:Key="NullableBooleanToBooleanConverter" />
    </Page.Resources>
    
    <Grid Background="Transparent">
        <StackPanel Margin="10 0 10 10">

            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                
                <!--绑定附加属性，注意要用括号括起来-->
                <TextBox Name="textBox1" Margin="5" Text="{Binding Path=(Grid.Row), RelativeSource={RelativeSource Self}}" Grid.Row="0" />

                <!--使用绑定时，可以在 Binding 或 x:Bind 后直接加 Path 的值，而不用写“Path=”-->
                <TextBox Name="textBox2" Margin="5" Text="{Binding (Grid.Row), RelativeSource={RelativeSource Self}}" Grid.Row="1" />

                <!--在 CodeBehind 端绑定附加属性-->
                <TextBox Name="textBox3" Margin="5" Grid.Row="2" />
            </Grid>

            <!--绑定自定义附加属性（在 CodeBehind 端绑定自定义附加属性暂时没有成功）-->
            <TextBox Name="textBox4" Margin="5" local:MyAttachedProperty.SubTitle="custom attached property" Text="{Binding (local:MyAttachedProperty.SubTitle), RelativeSource={RelativeSource Self}}" />

            <!--绑定指定对象的指定属性-->
            <TextBox Name="textBox5" Margin="5" Text="{Binding Margin.Top, RelativeSource={RelativeSource Self}}" />
            
            <!--
                Background 是 Brush 类型
                SolidColorBrush 继承自 Brush
                Background.(SolidColorBrush.Color) 的意思就是将 Background 的 Brush 类型转换为 SolidColorBrush 类型并取其 Color 属性
            -->
            <TextBox Name="textBox6" Margin="5" Text="{x:Bind Background.(SolidColorBrush.Color)}" />

            <!--
                x:Bind 没有 ElementName，那如何与其他元素绑定呢，像下面这样即可
            -->
            <TextBox Name="textBox7" Margin="5" Text="{x:Bind textBox6.Text}" />

            <!--
                x:Bind 如何绑定到其他元素的附加属性呢，像下面这样即可
            -->
            <TextBox Name="textBox8" Margin="5" Text="{x:Bind textBox2.(Grid.Row)}" />

            <!--
                x:Bind 如何绑定到其他元素的自定义附加属性呢，像下面这样即可
            -->
            <TextBox Name="textBox9" Margin="5" Text="{x:Bind textBox4.(local:MyAttachedProperty.SubTitle)}" />

            <!--
                在本例中 CurrentEmployee 是 object 类型，要将他转换为 Employee 类型，然后再使用其属性，写法如下
            -->
            <TextBox Name="textBox10" Margin="5" Text="{x:Bind CurrentEmployee.(common:Employee.Name)}" />

            <!--
                Binding 也可以这么写（x:Bind 不支持这么写）
            -->
            <TextBox Name="textBox11" Margin="5">
                <TextBox.Text>
                    <Binding Path="Text" ElementName="textBox6" />
                </TextBox.Text>
            </TextBox>

            <!--
                下面的示例用于演示如何绑定到 DataContext 对象的某个属性
            -->
            <TextBox Name="textBox12" DataContext="{x:Bind CurrentEmployee}" Text="{Binding Name}" Margin="5" />
            
            <!--
                下面的示例用于演示如何直接绑定到 DataContext 对象（而不是绑定 DataContext 对象的某个属性）
            -->
            <TextBox Name="textBox13" DataContext="{x:Bind MyName}" Text="{Binding}" Margin="5" />

            <!--
                Binding 绑定时，如果数据类型不一致，会尝试自动转换，比如此例：bool? 会被自动自动转换为 bool
            -->
            <TextBox Name="textBox14" Text="我是 textBox14" IsReadOnly="{Binding IsChecked, ElementName=chk1}" Margin="5" />
            <CheckBox Name="chk1" Content="textBox14 IsReadOnly" IsChecked="True" Margin="5 0 0 0" />

            <!--
                x:Bind 是编译时的强类型绑定，如果数据类型不一致，不会自动转换，比如此例：要通过 Converter 把 bool? 转换为 bool
            -->
            <TextBox Name="textBox15" Text="我是 textBox15" IsReadOnly="{x:Bind chk2.IsChecked, Mode=TwoWay, Converter={StaticResource NullableBooleanToBooleanConverter}}" Margin="5" />
            <CheckBox Name="chk2" Content="textBox15 IsReadOnly" IsChecked="True" Margin="5 0 0 0" />

            <!--
                再看看绑定此种路径时的写法，要理解
            -->
            <Rectangle Name="rectangle1" Height="20" Fill="Orange" Margin="5" />
            <TextBox Name="textBox16" Margin="5 0 0 0" Text="{x:Bind rectangle1.(Shape.Fill).(SolidColorBrush.Color)}" />

            <!--
                再来个更长的看看，要理解
            -->
            <Rectangle Name="rectangle2" Height="20" Width="100" HorizontalAlignment="Left" Fill="Orange" Margin="5">
                <!--
                    注：这里必须先要声明出 ScaleTransform，这样才能与之绑定（否则运行时会报错）
                -->
                <Rectangle.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform />
                    </TransformGroup>
                </Rectangle.RenderTransform>
            </Rectangle>
            <TextBox Name="textBox17" Margin="5 0 0 0" Text="{x:Bind rectangle2.(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX), Mode=TwoWay}" />

        </StackPanel>
    </Grid>
</Page>
